# -*- coding: utf-8 -*-

from odoo import api, fields, models, _
from datetime import datetime, timedelta
from odoo.tools import DEFAULT_SERVER_DATETIME_FORMAT as DF


class Purchase(models.Model):
    _inherit = 'purchase.order'

    @api.multi
    def button_confirm(self):
        for order in self:
            if order.state not in ['draft', 'sent']:
                continue
            smsNumberObj = self.env['ir.model.data'].get_object('po_sms_send', 'sms_number_po')
            # gateway_model = smsNumberObj.account_id.account_gateway_id.gateway_model_name
            lang_code = self.env.context.get('lang') or 'en_US'
            lang = self.env['res.lang']
            lang_id = lang._lang_get(lang_code)
            date_format = lang_id.date_format
            odate = datetime.strptime(order.date_order, DF).date()
            sms_content = ('PO generated by RS \r\n %s Date:%s') %(order.name, datetime.strftime(odate,date_format))
            for line in order.order_line:
                sms_content = sms_content + '\r\n' + line.product_id.display_name + ' ' + str(line.product_qty) + ' ' + line.product_uom.name
            deliveryTime = datetime.now() + timedelta(seconds=300)
            my_model = self.env['ir.model'].search([('model','=','purchase.order')])
            my_sms = smsNumberObj.account_id.send_message(smsNumberObj.mobile_number, order.partner_id.mobile, sms_content.encode('utf-8'), 'purchase.order', order.id)
            sms_message = self.env['sms.message'].create({'record_id': order.id,'model_id':my_model[0].id,'account_id':smsNumberObj.account_id.id,'from_mobile':smsNumberObj.mobile_number,'to_mobile':order.partner_id.mobile,'sms_content':sms_content,'status_string':my_sms.response_string, 'direction':'O','message_date':datetime.utcnow(), 'status_code':my_sms.delivary_state, 'sms_gateway_message_id':my_sms.message_id, 'by_partner_id':self.env.user.partner_id.id})
            sms_subtype = self.env['ir.model.data'].get_object('sms_frame', 'sms_subtype')
            self.env['purchase.order'].search([('id','=', order.id)]).message_post(body=sms_content, subject="SMS Sent", message_type="comment", subtype_id=sms_subtype.id)
            order._add_supplier_to_product()
            # Deal with double validation process
            if order.company_id.po_double_validation == 'one_step'\
                    or (order.company_id.po_double_validation == 'two_step'\
                        and order.amount_total < self.env.user.company_id.currency_id.compute(order.company_id.po_double_validation_amount, order.currency_id))\
                    or order.user_has_groups('purchase.group_purchase_manager'):
                order.button_approve()
            else:
                order.write({'state': 'to approve'})
        return True


        